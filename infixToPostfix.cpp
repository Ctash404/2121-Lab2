/*
 * Name:Conner Tash
 * Date Submitted:9-12-2022
 * Lab Section: 003
 * Assignment Name:Lab 2: Infix to Postfix Coversion
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
int infixToPostfix(string infix[], int length, string postfix[])
{
    stack<string> myStack;
    for (int i = 0; i < length; i++)
    {
        if(infix[i] == "0" || infix[i] == "1" || infix[i] == "2" || infix[i] == "3" || infix[i] == "4" || infix[i] == "5" 
                    || infix[i] == "6" || infix[i] == "7" || infix[i] == "8" || infix[i] == "9")
        {
            postfix[i] = infix[i];
        }
        else if (infix[i] == "*" || infix[i] == "/" || infix [i] == "%")
        {
            myStack.push(infix[i]);
        }
        else if (infix[i] == "+" || infix[i] == "-")
        {
            if(myStack.top() == "*" || myStack.top() == "/" || myStack.top() == "%")
            {
            }
             /*   if(myStack.empty())
                {
                    cout << "empty\n";
                    return 0;
                }
                postfix[i] = myStack.top();
                myStack.pop();
            }
            else
            {
                myStack.push(infix[i]);
            }*/
        }
    }
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}