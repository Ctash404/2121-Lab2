/*
 * Name:Conner Tash
 * Date Submitted:9-12-2022
 * Lab Section: 003
 * Assignment Name:Lab 2: Infix to Postfix Coversion
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

int precedence (string infix)
{
    if(infix == "(" || infix == ")")
    {
        return 4;
    }
    else if (infix == "*" || infix == "%" ||infix == "/")
    {
        return 3;
    }
    else if (infix == "-" || infix == "+")
    {
        return 2;
    }
    else 
    {
        return 1;
    }
}

bool seeIfParth(string infix, int length)
{
    int left = 0;
    int right = 0;

    for (int i = 0; i < length; i++)
    {
        if(infix == "(")
        {
            left++;
        }
        else 
        {
            right++;
        }
    }
    if(left == right)
    {
        return true;
    }
    return false;
}
int infixToPostfix(string infix[], int length, string postfix[])
{
    stack<string> myStack;
    int positionOfPostfix = 0;
    if(seeIfParth(infix, length))
    {
        return 0;
    }
    for (int i = 0; i < length; i++)
    {
        
        if(precedence(infix[i]) == 1)
        {
            postfix[positionOfPostfix] == infix[i];
            positionOfPostfix++;
        }
        else if(infix[i] == "(")
        {
            myStack.push(infix[i]);
        }
        else if (infix[i] == ")")
        {
            while(myStack.top() != "(")
            {
                postfix[positionOfPostfix] = myStack.top();
                positionOfPostfix++;
                myStack.pop();
            }
            myStack.pop();
        }
        else if (precedence(infix[i]) == 3)
        {
            while(!myStack.empty() && myStack.top() != "(")
            {
                postfix[positionOfPostfix] = myStack.top();
                positionOfPostfix++;
                myStack.pop();
            }
            myStack.push(infix[i]);
        }
        else if (precedence(infix[i]) == 2)
        {
            while(!myStack.empty() && myStack.top() != "(")
            {
                postfix[positionOfPostfix] = myStack.top();
                positionOfPostfix++;
                myStack.pop();
            }
            myStack.push(infix[i]);
        }
        while(!myStack.empty())
        {
            postfix[positionOfPostfix] = myStack.top();
            positionOfPostfix++;
            myStack.top();
        }
    }
    return length = positionOfPostfix;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}